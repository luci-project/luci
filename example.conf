# This is the configuration for the Luci dynamic loader
# all non-empty lines not starting with `#` are taken into account.
# Every parameter listed in this file could also be set using environment variables,
# however, the latter ones have higher priority.

# Path to library configuration file (similar to /etc/ld.so.conf )
# Each line contains the path to a directory which should be used for searching
# the libraries in the specific order.
# If not defined, the configuration file at the default path will be used:
#LD_LIBRARY_CONF=/opt/luci/libpath.conf

# Set log level for (debug) output
#    0: Disable logging / no output
#    1: show only fatal errors
#    2: show all errors
#    3: print warnings
#    4: show runtime information
#    5: show verbose information
#    6: print all debug output
#    7: print tracing information
# Default log level is 3 (warnings)
#LD_LOGLEVEL=3

# Log to file (instead of standard error stream)
# The file will be truncated on each start unless LD_LOGFILE_APPEND is set (see below)
#LD_LOGFILE=/var/log/luci.log

# Log file behavior on start
#    0: truncate log file (default)
#    1: append
#LD_LOGFILE_APPEND=1

# Tracing - not implemented yet
#LD_TRACING=0

# Default path to Luci rtld binary
#LD_PATH=/opt/luci/ld-luci.so

# Support for dynamic updates during runtime
# Currently, only libraries with compatible data section are supported
#    0: disabled (default)
#    1: enabled
LD_DYNAMIC_UPDATE=0

# Support for dynamic updates for shared objects manually loaded during runtime (dlopen)
#    0: disabled (default)
#    1: enabled
LD_DYNAMIC_DLUPDATE=0

# Support old GLIBC (< 2.2) non-standard behavior for weak symbols:
# If this is variable is set (with any value), the `weak` flag is respected when
# resolving symbols -- otherwise the first matching symbol will be used
#LD_DYNAMIC_WEAK=1

# A list of directories in which to search for ELF libraries at execution time.
# The items in the list are separated by semicolons.
#LD_LIBRARY_PATH=/path/to/libs/;/other/path/

# A list of additional ELF shared objects to be loaded before all others.
# The items in the list are separated by semicolons.
# Warning: This is not fully GNU libc compliant yet (dependency order issue)
#LD_PRELOAD=libfoo.so;/path/to/libbar.so

# If set to a nonempty string, causes the dynamic linker to resolve all symbols
# at program startup instead of deferring function call resolution to the point
# when they are first referenced.
#LD_BIND_NOW=1

# If this variable is set to a nonempty string, do not update the GOT (global
# offset table) and PLT (procedure linkage table) after resolving a function
# symbol.
#LD_BIND_NOT=1

# If this variable is set to a nonempty string, the arguments passed to the
# process are shown on standard error before starting.
#LD_SHOW_ARGS=1

# If this variable is set to a nonempty string, the auxiliary arrays from the
# karnel passed to process are shown on standard error before starting.
#LD_SHOW_AUXV=1

# If this variable is set to a nonempty string, the environment variable
# passed to process are shown on standard error before starting.
# Plase note: Luci will "consume" certain loader specific variables, hence
# certain enironment variables will be replaced by an empty string
# (at the end of the array list)
#LD_SHOW_ENV=1

# If set to a nonempty string, it is interpreted as URI used to connect to a
# debug hash service (returning hash of variables) for improved detection of
# patchability.
# Allowed URIs
#	unix:/path/to/server.sock                        (unix domain stream)
#	unix:/path/to/server.sock:/path/to/client.sock   (unix domain datagram)
#   tcp:1.2.3.4:8000                                 (IP with port stream)
#   udp:1.2.3.4:8000                                 (IP with port datagram)
#LD_DEBUG_HASH=tcp:127.0.0.1:9001

# If this variable is set to a nonempty string, the loader will locally search
# for debug files for each binary (using debug link and build id)
#LD_DEBUG_SYMBOLS=1

# This allows specifing an alternative root directory for debug symbols
#LD_DEBUG_SYMBOLS_ROOT=/opt/dbgsym/

# Set to a file path to write status changes (updates) to it
# (can be a named pipe to detect requirements for restarts due to update failures)
#LD_STATUS_INFO=/var/run/status_pipe

# If set to a nonempty string, status info will also containt details about
# initial libraries loaded during setting up the process
#LD_EARLY_STATUS_INFO=1

# If set to a nonempty string, it will be verified that the contents of a
# relocation target in data section was not altered by the user programm
#LD_RELOCATE_CHECK=1

# This option controls the comparison mode.
# Higher numbers will relax the check:
#	0 to use an extended check using internal and external ID [default]
#	1 for using internal ID only for writeable sections
#	2 for using internal ID only on all sections except executable ones
#	3 to completely disable external ID check (and only internal one)
# This can be used to enable patchability on shared objects with poor API decisions ;)
#LD_RELAX_CHECK=1

# If this variable is set to a nonempty string, relocations in outdated (older)
# versions will be fixed as well (this will especially effect the relro section)
#LD_RELOCATE_OUTDATED=1

# Detect access of code in outdated libraries
# Valid (supported) modes are
#
# - userfaultfd   which will unmap the full executable code section
#                 Please note: This feature requires either the CAP_SYS_PTRACE
#                 capability or /proc/sys/vm/unprivileged_userfaultfd must be
#                 set to 1!
#
# - uprobes       which will set an event for all updated functions
#                 Please note: This requires super user permissions
#
# - uprobes_deps  same as above, but setting an entry for dependencies of
#                 updated functions as well
#
#LD_DETECT_OUTDATED_DELAY=1

# Delay before installing the dection for outdated access
# In case the value is set to 0 (seconds), it is quite likely that this will
# detect such access, since libraries might be active when performing an update.
